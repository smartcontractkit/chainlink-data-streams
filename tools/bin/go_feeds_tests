#!/usr/bin/env bash
set -o pipefail
set +e

SCRIPT_PATH=`dirname "$0"`; SCRIPT_PATH=`eval "cd \"$SCRIPT_PATH\" && pwd"`
OUTPUT_FILE="./output.txt"

echo "Failed tests and panics: ---------------------"
echo ""
go test ./... -covermode=atomic -coverpkg=./... -coverprofile=./coverage.txt -json | tee $OUTPUT_FILE | grep --line-buffered --line-number -e "\-\-\- FAIL" -e "FAIL\s"
EXITCODE=${PIPESTATUS[0]}
echo ""
echo "----------------------------------------------"

echo ""
echo "(Note: panics abruptly end the test run and may appear out-of-place, not where they originate."
echo "Finding their origin test may involve disabling parallelism)"
echo ""
echo "Potentially related:"
echo ""

# Assert no known sensitive strings present in test logger output
printf "\n----------------------------------------------\n\n"
echo "Beginning check of output logs for sensitive strings"
$SCRIPT_PATH/scrub_logs $OUTPUT_FILE
if [[ $? != 0 ]]; then
  exit 1
fi

echo "Exit code: $EXITCODE"
if [[ $EXITCODE != 0 ]]; then
  echo "Encountered test failures."
  echo ""
  echo "----------------------------------------------"
  echo "Dumping output file: $OUTPUT_FILE"
  cat $OUTPUT_FILE
else
  echo "All tests passed!"
fi
exit $EXITCODE
