// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: plugin_codecs.proto

package llo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LLOStreamValue_Type int32

const (
	LLOStreamValue_Decimal                LLOStreamValue_Type = 0
	LLOStreamValue_Quote                  LLOStreamValue_Type = 1
	LLOStreamValue_TimestampedStreamValue LLOStreamValue_Type = 2
)

// Enum value maps for LLOStreamValue_Type.
var (
	LLOStreamValue_Type_name = map[int32]string{
		0: "Decimal",
		1: "Quote",
		2: "TimestampedStreamValue",
	}
	LLOStreamValue_Type_value = map[string]int32{
		"Decimal":                0,
		"Quote":                  1,
		"TimestampedStreamValue": 2,
	}
)

func (x LLOStreamValue_Type) Enum() *LLOStreamValue_Type {
	p := new(LLOStreamValue_Type)
	*p = x
	return p
}

func (x LLOStreamValue_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LLOStreamValue_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_codecs_proto_enumTypes[0].Descriptor()
}

func (LLOStreamValue_Type) Type() protoreflect.EnumType {
	return &file_plugin_codecs_proto_enumTypes[0]
}

func (x LLOStreamValue_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LLOStreamValue_Type.Descriptor instead.
func (LLOStreamValue_Type) EnumDescriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{1, 0}
}

// Observation CAN be changed as long as it doesn't break decode for legacy
// versions.
//
// i.e. adding new fields is ok
type LLOObservationProto struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	AttestedPredecessorRetirement []byte                 `protobuf:"bytes,1,opt,name=attestedPredecessorRetirement,proto3" json:"attestedPredecessorRetirement,omitempty"`
	ShouldRetire                  bool                   `protobuf:"varint,2,opt,name=shouldRetire,proto3" json:"shouldRetire,omitempty"`
	// TODO: unixTimestampNanosecondsLegacy can be removed after this version
	// is rolled out everywhere
	UnixTimestampNanosecondsLegacy int64    `protobuf:"varint,3,opt,name=unixTimestampNanosecondsLegacy,proto3" json:"unixTimestampNanosecondsLegacy,omitempty"`
	UnixTimestampNanoseconds       uint64   `protobuf:"varint,7,opt,name=unixTimestampNanoseconds,proto3" json:"unixTimestampNanoseconds,omitempty"`
	RemoveChannelIDs               []uint32 `protobuf:"varint,4,rep,packed,name=removeChannelIDs,proto3" json:"removeChannelIDs,omitempty"`
	// Maps are safe to use here because Observation serialization does not
	// need to be deterministic. Non-deterministic map serialization is
	// marginally more efficient than converting to tuples and guarantees
	// uniqueness.
	UpdateChannelDefinitions map[uint32]*LLOChannelDefinitionProto `protobuf:"bytes,5,rep,name=updateChannelDefinitions,proto3" json:"updateChannelDefinitions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StreamValues             map[uint32]*LLOStreamValue            `protobuf:"bytes,6,rep,name=streamValues,proto3" json:"streamValues,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *LLOObservationProto) Reset() {
	*x = LLOObservationProto{}
	mi := &file_plugin_codecs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOObservationProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOObservationProto) ProtoMessage() {}

func (x *LLOObservationProto) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOObservationProto.ProtoReflect.Descriptor instead.
func (*LLOObservationProto) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{0}
}

func (x *LLOObservationProto) GetAttestedPredecessorRetirement() []byte {
	if x != nil {
		return x.AttestedPredecessorRetirement
	}
	return nil
}

func (x *LLOObservationProto) GetShouldRetire() bool {
	if x != nil {
		return x.ShouldRetire
	}
	return false
}

func (x *LLOObservationProto) GetUnixTimestampNanosecondsLegacy() int64 {
	if x != nil {
		return x.UnixTimestampNanosecondsLegacy
	}
	return 0
}

func (x *LLOObservationProto) GetUnixTimestampNanoseconds() uint64 {
	if x != nil {
		return x.UnixTimestampNanoseconds
	}
	return 0
}

func (x *LLOObservationProto) GetRemoveChannelIDs() []uint32 {
	if x != nil {
		return x.RemoveChannelIDs
	}
	return nil
}

func (x *LLOObservationProto) GetUpdateChannelDefinitions() map[uint32]*LLOChannelDefinitionProto {
	if x != nil {
		return x.UpdateChannelDefinitions
	}
	return nil
}

func (x *LLOObservationProto) GetStreamValues() map[uint32]*LLOStreamValue {
	if x != nil {
		return x.StreamValues
	}
	return nil
}

type LLOStreamValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          LLOStreamValue_Type    `protobuf:"varint,1,opt,name=type,proto3,enum=v1.LLOStreamValue_Type" json:"type,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLOStreamValue) Reset() {
	*x = LLOStreamValue{}
	mi := &file_plugin_codecs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOStreamValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOStreamValue) ProtoMessage() {}

func (x *LLOStreamValue) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOStreamValue.ProtoReflect.Descriptor instead.
func (*LLOStreamValue) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{1}
}

func (x *LLOStreamValue) GetType() LLOStreamValue_Type {
	if x != nil {
		return x.Type
	}
	return LLOStreamValue_Decimal
}

func (x *LLOStreamValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type LLOStreamValueQuote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bid           []byte                 `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
	Benchmark     []byte                 `protobuf:"bytes,2,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	Ask           []byte                 `protobuf:"bytes,3,opt,name=ask,proto3" json:"ask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLOStreamValueQuote) Reset() {
	*x = LLOStreamValueQuote{}
	mi := &file_plugin_codecs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOStreamValueQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOStreamValueQuote) ProtoMessage() {}

func (x *LLOStreamValueQuote) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOStreamValueQuote.ProtoReflect.Descriptor instead.
func (*LLOStreamValueQuote) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{2}
}

func (x *LLOStreamValueQuote) GetBid() []byte {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *LLOStreamValueQuote) GetBenchmark() []byte {
	if x != nil {
		return x.Benchmark
	}
	return nil
}

func (x *LLOStreamValueQuote) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

type LLOTimestampedStreamValue struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ObservedAtNanoseconds uint64                 `protobuf:"varint,1,opt,name=observedAtNanoseconds,proto3" json:"observedAtNanoseconds,omitempty"`
	StreamValue           *LLOStreamValue        `protobuf:"bytes,2,opt,name=streamValue,proto3" json:"streamValue,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *LLOTimestampedStreamValue) Reset() {
	*x = LLOTimestampedStreamValue{}
	mi := &file_plugin_codecs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOTimestampedStreamValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOTimestampedStreamValue) ProtoMessage() {}

func (x *LLOTimestampedStreamValue) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOTimestampedStreamValue.ProtoReflect.Descriptor instead.
func (*LLOTimestampedStreamValue) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{3}
}

func (x *LLOTimestampedStreamValue) GetObservedAtNanoseconds() uint64 {
	if x != nil {
		return x.ObservedAtNanoseconds
	}
	return 0
}

func (x *LLOTimestampedStreamValue) GetStreamValue() *LLOStreamValue {
	if x != nil {
		return x.StreamValue
	}
	return nil
}

type LLOChannelDefinitionProto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportFormat  uint32                 `protobuf:"varint,1,opt,name=reportFormat,proto3" json:"reportFormat,omitempty"`
	Streams       []*LLOStreamDefinition `protobuf:"bytes,2,rep,name=streams,proto3" json:"streams,omitempty"`
	Opts          []byte                 `protobuf:"bytes,3,opt,name=opts,proto3" json:"opts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLOChannelDefinitionProto) Reset() {
	*x = LLOChannelDefinitionProto{}
	mi := &file_plugin_codecs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOChannelDefinitionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOChannelDefinitionProto) ProtoMessage() {}

func (x *LLOChannelDefinitionProto) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOChannelDefinitionProto.ProtoReflect.Descriptor instead.
func (*LLOChannelDefinitionProto) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{4}
}

func (x *LLOChannelDefinitionProto) GetReportFormat() uint32 {
	if x != nil {
		return x.ReportFormat
	}
	return 0
}

func (x *LLOChannelDefinitionProto) GetStreams() []*LLOStreamDefinition {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *LLOChannelDefinitionProto) GetOpts() []byte {
	if x != nil {
		return x.Opts
	}
	return nil
}

type LLOStreamDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamID      uint32                 `protobuf:"varint,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Aggregator    uint32                 `protobuf:"varint,2,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLOStreamDefinition) Reset() {
	*x = LLOStreamDefinition{}
	mi := &file_plugin_codecs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOStreamDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOStreamDefinition) ProtoMessage() {}

func (x *LLOStreamDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOStreamDefinition.ProtoReflect.Descriptor instead.
func (*LLOStreamDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{5}
}

func (x *LLOStreamDefinition) GetStreamID() uint32 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *LLOStreamDefinition) GetAggregator() uint32 {
	if x != nil {
		return x.Aggregator
	}
	return 0
}

type LLOStreamObservationProto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Valid         bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLOStreamObservationProto) Reset() {
	*x = LLOStreamObservationProto{}
	mi := &file_plugin_codecs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOStreamObservationProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOStreamObservationProto) ProtoMessage() {}

func (x *LLOStreamObservationProto) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOStreamObservationProto.ProtoReflect.Descriptor instead.
func (*LLOStreamObservationProto) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{6}
}

func (x *LLOStreamObservationProto) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *LLOStreamObservationProto) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// NOTE: Outcome must serialize deterministically, hence use of repeated tuple instead of maps
type LLOOutcomeProtoV0 struct {
	state                           protoimpl.MessageState                   `protogen:"open.v1"`
	LifeCycleStage                  string                                   `protobuf:"bytes,1,opt,name=lifeCycleStage,proto3" json:"lifeCycleStage,omitempty"`
	ObservationTimestampNanoseconds int64                                    `protobuf:"varint,2,opt,name=observationTimestampNanoseconds,proto3" json:"observationTimestampNanoseconds,omitempty"`
	ChannelDefinitions              []*LLOChannelIDAndDefinitionProto        `protobuf:"bytes,3,rep,name=channelDefinitions,proto3" json:"channelDefinitions,omitempty"`
	ValidAfterSeconds               []*LLOChannelIDAndValidAfterSecondsProto `protobuf:"bytes,4,rep,name=validAfterSeconds,proto3" json:"validAfterSeconds,omitempty"`
	StreamAggregates                []*LLOStreamAggregate                    `protobuf:"bytes,5,rep,name=streamAggregates,proto3" json:"streamAggregates,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *LLOOutcomeProtoV0) Reset() {
	*x = LLOOutcomeProtoV0{}
	mi := &file_plugin_codecs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOOutcomeProtoV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOOutcomeProtoV0) ProtoMessage() {}

func (x *LLOOutcomeProtoV0) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOOutcomeProtoV0.ProtoReflect.Descriptor instead.
func (*LLOOutcomeProtoV0) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{7}
}

func (x *LLOOutcomeProtoV0) GetLifeCycleStage() string {
	if x != nil {
		return x.LifeCycleStage
	}
	return ""
}

func (x *LLOOutcomeProtoV0) GetObservationTimestampNanoseconds() int64 {
	if x != nil {
		return x.ObservationTimestampNanoseconds
	}
	return 0
}

func (x *LLOOutcomeProtoV0) GetChannelDefinitions() []*LLOChannelIDAndDefinitionProto {
	if x != nil {
		return x.ChannelDefinitions
	}
	return nil
}

func (x *LLOOutcomeProtoV0) GetValidAfterSeconds() []*LLOChannelIDAndValidAfterSecondsProto {
	if x != nil {
		return x.ValidAfterSeconds
	}
	return nil
}

func (x *LLOOutcomeProtoV0) GetStreamAggregates() []*LLOStreamAggregate {
	if x != nil {
		return x.StreamAggregates
	}
	return nil
}

// NOTE: Outcome must serialize deterministically, hence use of repeated tuple instead of maps
type LLOOutcomeProtoV1 struct {
	state                           protoimpl.MessageState                       `protogen:"open.v1"`
	LifeCycleStage                  string                                       `protobuf:"bytes,1,opt,name=lifeCycleStage,proto3" json:"lifeCycleStage,omitempty"`
	ObservationTimestampNanoseconds uint64                                       `protobuf:"varint,2,opt,name=observationTimestampNanoseconds,proto3" json:"observationTimestampNanoseconds,omitempty"`
	ChannelDefinitions              []*LLOChannelIDAndDefinitionProto            `protobuf:"bytes,3,rep,name=channelDefinitions,proto3" json:"channelDefinitions,omitempty"`
	ValidAfterNanoseconds           []*LLOChannelIDAndValidAfterNanosecondsProto `protobuf:"bytes,4,rep,name=validAfterNanoseconds,proto3" json:"validAfterNanoseconds,omitempty"`
	StreamAggregates                []*LLOStreamAggregate                        `protobuf:"bytes,5,rep,name=streamAggregates,proto3" json:"streamAggregates,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *LLOOutcomeProtoV1) Reset() {
	*x = LLOOutcomeProtoV1{}
	mi := &file_plugin_codecs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOOutcomeProtoV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOOutcomeProtoV1) ProtoMessage() {}

func (x *LLOOutcomeProtoV1) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOOutcomeProtoV1.ProtoReflect.Descriptor instead.
func (*LLOOutcomeProtoV1) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{8}
}

func (x *LLOOutcomeProtoV1) GetLifeCycleStage() string {
	if x != nil {
		return x.LifeCycleStage
	}
	return ""
}

func (x *LLOOutcomeProtoV1) GetObservationTimestampNanoseconds() uint64 {
	if x != nil {
		return x.ObservationTimestampNanoseconds
	}
	return 0
}

func (x *LLOOutcomeProtoV1) GetChannelDefinitions() []*LLOChannelIDAndDefinitionProto {
	if x != nil {
		return x.ChannelDefinitions
	}
	return nil
}

func (x *LLOOutcomeProtoV1) GetValidAfterNanoseconds() []*LLOChannelIDAndValidAfterNanosecondsProto {
	if x != nil {
		return x.ValidAfterNanoseconds
	}
	return nil
}

func (x *LLOOutcomeProtoV1) GetStreamAggregates() []*LLOStreamAggregate {
	if x != nil {
		return x.StreamAggregates
	}
	return nil
}

type LLOChannelIDAndDefinitionProto struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	ChannelID         uint32                     `protobuf:"varint,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	ChannelDefinition *LLOChannelDefinitionProto `protobuf:"bytes,2,opt,name=channelDefinition,proto3" json:"channelDefinition,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LLOChannelIDAndDefinitionProto) Reset() {
	*x = LLOChannelIDAndDefinitionProto{}
	mi := &file_plugin_codecs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOChannelIDAndDefinitionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOChannelIDAndDefinitionProto) ProtoMessage() {}

func (x *LLOChannelIDAndDefinitionProto) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOChannelIDAndDefinitionProto.ProtoReflect.Descriptor instead.
func (*LLOChannelIDAndDefinitionProto) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{9}
}

func (x *LLOChannelIDAndDefinitionProto) GetChannelID() uint32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *LLOChannelIDAndDefinitionProto) GetChannelDefinition() *LLOChannelDefinitionProto {
	if x != nil {
		return x.ChannelDefinition
	}
	return nil
}

type LLOChannelIDAndValidAfterSecondsProto struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ChannelID         uint32                 `protobuf:"varint,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	ValidAfterSeconds uint32                 `protobuf:"varint,2,opt,name=validAfterSeconds,proto3" json:"validAfterSeconds,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LLOChannelIDAndValidAfterSecondsProto) Reset() {
	*x = LLOChannelIDAndValidAfterSecondsProto{}
	mi := &file_plugin_codecs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOChannelIDAndValidAfterSecondsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOChannelIDAndValidAfterSecondsProto) ProtoMessage() {}

func (x *LLOChannelIDAndValidAfterSecondsProto) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOChannelIDAndValidAfterSecondsProto.ProtoReflect.Descriptor instead.
func (*LLOChannelIDAndValidAfterSecondsProto) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{10}
}

func (x *LLOChannelIDAndValidAfterSecondsProto) GetChannelID() uint32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *LLOChannelIDAndValidAfterSecondsProto) GetValidAfterSeconds() uint32 {
	if x != nil {
		return x.ValidAfterSeconds
	}
	return 0
}

type LLOChannelIDAndValidAfterNanosecondsProto struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ChannelID             uint32                 `protobuf:"varint,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	ValidAfterNanoseconds uint64                 `protobuf:"varint,2,opt,name=validAfterNanoseconds,proto3" json:"validAfterNanoseconds,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *LLOChannelIDAndValidAfterNanosecondsProto) Reset() {
	*x = LLOChannelIDAndValidAfterNanosecondsProto{}
	mi := &file_plugin_codecs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOChannelIDAndValidAfterNanosecondsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOChannelIDAndValidAfterNanosecondsProto) ProtoMessage() {}

func (x *LLOChannelIDAndValidAfterNanosecondsProto) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOChannelIDAndValidAfterNanosecondsProto.ProtoReflect.Descriptor instead.
func (*LLOChannelIDAndValidAfterNanosecondsProto) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{11}
}

func (x *LLOChannelIDAndValidAfterNanosecondsProto) GetChannelID() uint32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *LLOChannelIDAndValidAfterNanosecondsProto) GetValidAfterNanoseconds() uint64 {
	if x != nil {
		return x.ValidAfterNanoseconds
	}
	return 0
}

type LLOStreamAggregate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamID      uint32                 `protobuf:"varint,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	StreamValue   *LLOStreamValue        `protobuf:"bytes,2,opt,name=streamValue,proto3" json:"streamValue,omitempty"`
	Aggregator    uint32                 `protobuf:"varint,3,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLOStreamAggregate) Reset() {
	*x = LLOStreamAggregate{}
	mi := &file_plugin_codecs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOStreamAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOStreamAggregate) ProtoMessage() {}

func (x *LLOStreamAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_codecs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOStreamAggregate.ProtoReflect.Descriptor instead.
func (*LLOStreamAggregate) Descriptor() ([]byte, []int) {
	return file_plugin_codecs_proto_rawDescGZIP(), []int{12}
}

func (x *LLOStreamAggregate) GetStreamID() uint32 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *LLOStreamAggregate) GetStreamValue() *LLOStreamValue {
	if x != nil {
		return x.StreamValue
	}
	return nil
}

func (x *LLOStreamAggregate) GetAggregator() uint32 {
	if x != nil {
		return x.Aggregator
	}
	return 0
}

var File_plugin_codecs_proto protoreflect.FileDescriptor

var file_plugin_codecs_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x22, 0xb2, 0x05, 0x0a, 0x13, 0x4c, 0x4c,
	0x4f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x44, 0x0a, 0x1d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65,
	0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x74,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x75,
	0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1e, 0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x71, 0x0a, 0x18, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x6a, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x11, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f,
	0x01, 0x0a, 0x0e, 0x4c, 0x4c, 0x4f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x22, 0x57, 0x0a, 0x13, 0x4c, 0x4c, 0x4f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x4c, 0x4c,
	0x4f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x34, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x4c, 0x4c, 0x4f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x13,
	0x4c, 0x4c, 0x4f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x47, 0x0a, 0x19, 0x4c, 0x4c, 0x4f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x11, 0x4c, 0x4c, 0x4f,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x30, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x52, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x41, 0x6e,
	0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a,
	0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x82, 0x03, 0x0a, 0x11, 0x4c, 0x4c, 0x4f, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x48, 0x0a, 0x1f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a,
	0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x41, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x15, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x4c, 0x4c, 0x4f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x25, 0x4c, 0x4c, 0x4f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x7f, 0x0a, 0x29, 0x4c, 0x4c, 0x4f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x4c,
	0x4c, 0x4f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x34, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x6c, 0x6c, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_plugin_codecs_proto_rawDescOnce sync.Once
	file_plugin_codecs_proto_rawDescData []byte
)

func file_plugin_codecs_proto_rawDescGZIP() []byte {
	file_plugin_codecs_proto_rawDescOnce.Do(func() {
		file_plugin_codecs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugin_codecs_proto_rawDesc), len(file_plugin_codecs_proto_rawDesc)))
	})
	return file_plugin_codecs_proto_rawDescData
}

var file_plugin_codecs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_plugin_codecs_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_plugin_codecs_proto_goTypes = []any{
	(LLOStreamValue_Type)(0),                          // 0: v1.LLOStreamValue.Type
	(*LLOObservationProto)(nil),                       // 1: v1.LLOObservationProto
	(*LLOStreamValue)(nil),                            // 2: v1.LLOStreamValue
	(*LLOStreamValueQuote)(nil),                       // 3: v1.LLOStreamValueQuote
	(*LLOTimestampedStreamValue)(nil),                 // 4: v1.LLOTimestampedStreamValue
	(*LLOChannelDefinitionProto)(nil),                 // 5: v1.LLOChannelDefinitionProto
	(*LLOStreamDefinition)(nil),                       // 6: v1.LLOStreamDefinition
	(*LLOStreamObservationProto)(nil),                 // 7: v1.LLOStreamObservationProto
	(*LLOOutcomeProtoV0)(nil),                         // 8: v1.LLOOutcomeProtoV0
	(*LLOOutcomeProtoV1)(nil),                         // 9: v1.LLOOutcomeProtoV1
	(*LLOChannelIDAndDefinitionProto)(nil),            // 10: v1.LLOChannelIDAndDefinitionProto
	(*LLOChannelIDAndValidAfterSecondsProto)(nil),     // 11: v1.LLOChannelIDAndValidAfterSecondsProto
	(*LLOChannelIDAndValidAfterNanosecondsProto)(nil), // 12: v1.LLOChannelIDAndValidAfterNanosecondsProto
	(*LLOStreamAggregate)(nil),                        // 13: v1.LLOStreamAggregate
	nil,                                               // 14: v1.LLOObservationProto.UpdateChannelDefinitionsEntry
	nil,                                               // 15: v1.LLOObservationProto.StreamValuesEntry
}
var file_plugin_codecs_proto_depIdxs = []int32{
	14, // 0: v1.LLOObservationProto.updateChannelDefinitions:type_name -> v1.LLOObservationProto.UpdateChannelDefinitionsEntry
	15, // 1: v1.LLOObservationProto.streamValues:type_name -> v1.LLOObservationProto.StreamValuesEntry
	0,  // 2: v1.LLOStreamValue.type:type_name -> v1.LLOStreamValue.Type
	2,  // 3: v1.LLOTimestampedStreamValue.streamValue:type_name -> v1.LLOStreamValue
	6,  // 4: v1.LLOChannelDefinitionProto.streams:type_name -> v1.LLOStreamDefinition
	10, // 5: v1.LLOOutcomeProtoV0.channelDefinitions:type_name -> v1.LLOChannelIDAndDefinitionProto
	11, // 6: v1.LLOOutcomeProtoV0.validAfterSeconds:type_name -> v1.LLOChannelIDAndValidAfterSecondsProto
	13, // 7: v1.LLOOutcomeProtoV0.streamAggregates:type_name -> v1.LLOStreamAggregate
	10, // 8: v1.LLOOutcomeProtoV1.channelDefinitions:type_name -> v1.LLOChannelIDAndDefinitionProto
	12, // 9: v1.LLOOutcomeProtoV1.validAfterNanoseconds:type_name -> v1.LLOChannelIDAndValidAfterNanosecondsProto
	13, // 10: v1.LLOOutcomeProtoV1.streamAggregates:type_name -> v1.LLOStreamAggregate
	5,  // 11: v1.LLOChannelIDAndDefinitionProto.channelDefinition:type_name -> v1.LLOChannelDefinitionProto
	2,  // 12: v1.LLOStreamAggregate.streamValue:type_name -> v1.LLOStreamValue
	5,  // 13: v1.LLOObservationProto.UpdateChannelDefinitionsEntry.value:type_name -> v1.LLOChannelDefinitionProto
	2,  // 14: v1.LLOObservationProto.StreamValuesEntry.value:type_name -> v1.LLOStreamValue
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_plugin_codecs_proto_init() }
func file_plugin_codecs_proto_init() {
	if File_plugin_codecs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugin_codecs_proto_rawDesc), len(file_plugin_codecs_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugin_codecs_proto_goTypes,
		DependencyIndexes: file_plugin_codecs_proto_depIdxs,
		EnumInfos:         file_plugin_codecs_proto_enumTypes,
		MessageInfos:      file_plugin_codecs_proto_msgTypes,
	}.Build()
	File_plugin_codecs_proto = out.File
	file_plugin_codecs_proto_goTypes = nil
	file_plugin_codecs_proto_depIdxs = nil
}
